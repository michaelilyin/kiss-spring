#####
# Goods Service
#####
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: kiss-cloud
  labels:
    app: goods
  name: goods
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: goods
  strategy:
    type: RollingUpdate
  template:
    metadata:
      namespace: kiss-cloud
      labels:
        app: goods
    spec:
      containers:
      - image: michaelilyin/kiss-spring-demo-goods:latest
        imagePullPolicy: Always
        name: kiss-cloud-goods
---
apiVersion: v1
kind: Service
metadata:
  namespace: kiss-cloud
  labels:
    app: goods
  name: goods
spec:
  ports:
  - name: 8080-8080
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: goods
  type: ClusterIP

---

#####
# Demo Shopping List Service
#####
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: kiss-cloud
  labels:
    app: demo-shopping-list
  name: demo-shopping-list
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: demo-shopping-list
  strategy:
    type: RollingUpdate
  template:
    metadata:
      namespace: kiss-cloud
      labels:
        app: demo-shopping-list
    spec:
      containers:
        - image: michaelilyin/demo-shopping-list:latest
          imagePullPolicy: Always
          name: kiss-cloud-demo-shopping-list
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  key: db.host
                  name: demo-cloud-shopping
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  key: db.port
                  name: demo-cloud-shopping
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  key: db.name
                  name: demo-cloud-shopping
            - name: DB_SCHEMA
              valueFrom:
                secretKeyRef:
                  key: db.schema
                  name: demo-cloud-shopping
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: db.username
                  name: demo-cloud-shopping
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: db.password
                  name: demo-cloud-shopping
---
apiVersion: v1
kind: Service
metadata:
  namespace: kiss-cloud
  labels:
    app: demo-shopping-list
  name: demo-shopping-list
spec:
  ports:
    - name: 38081-38081
      port: 38081
      protocol: TCP
      targetPort: 38081
  selector:
    app: demo-shopping-list
  type: ClusterIP
---

# CLOUD INGRESS
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  namespace: kiss-cloud
  name: kiss-cloud-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1$2$3
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  labels:
    app: goods
spec:
  tls:
    - hosts:
        - cl.michaelilyin.ru
      secretName: cl-tls
  rules:
    - host: cl.michaelilyin.ru
      http:
        paths:
          - path: /(api)/intra(/|$)(.*)
            backend:
              serviceName: goods
              servicePort: 8080
          - path: /(shopping)(/|$)(.*)
            backend:
              serviceName: demo-shopping-list
              servicePort: 38081

---

#####
# Auth Service
#####
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: kiss-cloud
  labels:
    app: auth
  name: auth
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: auth
  strategy:
    type: RollingUpdate
  template:
    metadata:
      namespace: kiss-cloud
      labels:
        app: auth
    spec:
      containers:
        - image: jboss/keycloak:latest
          imagePullPolicy: Always
          name: kiss-cloud-auth
          env:
            - name: KEYCLOAK_USER
              valueFrom:
                secretKeyRef:
                  key: keycloak.user
                  name: kiss-cloud-keycloak
            - name: KEYCLOAK_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: keycloak.password
                  name: kiss-cloud-keycloak
            - name: DB_VENDOR
              value: postgres
            - name: DB_ADDR
              valueFrom:
                secretKeyRef:
                  key: db.addr
                  name: kiss-cloud-keycloak
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  key: db.port
                  name: kiss-cloud-keycloak
            - name: DB_DATABASE
              valueFrom:
                secretKeyRef:
                  key: db.database
                  name: kiss-cloud-keycloak
            - name: DB_SCHEMA
              valueFrom:
                secretKeyRef:
                  key: db.schema
                  name: kiss-cloud-keycloak
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  key: db.user
                  name: kiss-cloud-keycloak
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: db.password
                  name: kiss-cloud-keycloak
            - name: PROXY_ADDRESS_FORWARDING
              value: "true"
---
apiVersion: v1
kind: Service
metadata:
  namespace: kiss-cloud
  labels:
    app: auth
  name: auth
spec:
  ports:
    - name: 8080-8080
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: auth
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  namespace: kiss-cloud
  name: kiss-cloud-auth-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /auth/$1
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  labels:
    app: auth
spec:
  tls:
    - hosts:
        - auth.michaelilyin.ru
      secretName: auth-tls
  rules:
    - host: auth.michaelilyin.ru
      http:
        paths:
          - path: /auth/(.*)
            backend:
              serviceName: auth
              servicePort: 8080
